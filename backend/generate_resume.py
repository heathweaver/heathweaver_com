import yaml
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.units import inch
import json
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from typing import Dict, Any

def get_database_connection():
    return psycopg2.connect(
        dbname=os.getenv("DB_NAME", "cv_generator"),
        user=os.getenv("DB_USER", "postgres"),
        password=os.getenv("DB_PASSWORD", "postgres"),
        host=os.getenv("DB_HOST", "localhost"),
        port=os.getenv("DB_PORT", "5432")
    )

def get_cv_data(job_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Fetches CV data from the database and formats it according to the job requirements.
    The headline and profile are generated by the AI service in the TypeScript layer.
    """
    with get_database_connection() as conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            # Get professional experience
            cur.execute("""
                SELECT company, title, start_date, end_date, location, 
                       responsibilities, achievements, narrative
                FROM professional_experience
                ORDER BY start_date DESC
            """)
            experience = cur.fetchall()
            
            # Get education
            cur.execute("SELECT * FROM education ORDER BY end_date DESC")
            education = cur.fetchall()
            
            # Get awards
            cur.execute("SELECT * FROM awards ORDER BY date DESC")
            awards = cur.fetchall()
            
            # Format the CV data
            cv_data = {
                "headline": job_data.get("headline", ""),  # Will be provided by AI
                "profile": job_data.get("profile", ""),    # Will be provided by AI
                "employmentHistory": [
                    {
                        "title": f"{job['title']} at {job['company']}",
                        "date": f"{job['start_date'].strftime('%b %Y')} - {job['end_date'].strftime('%b %Y') if job['end_date'] else 'PRESENT'}",
                        "location": job['location'],
                        "bulletPoints": job_data.get("employmentHistory", [])[i].get("bulletPoints", []) if i < len(job_data.get("employmentHistory", [])) else []
                    }
                    for i, job in enumerate(experience)
                ],
                "education": "\n".join([
                    f"{edu['degree']} in {edu['field']}\n{edu['institution']}, {edu['end_date'].strftime('%Y')}"
                    for edu in education
                ]),
                "certificatesAndAwards": [
                    f"{award['title']}{' - ' + award['issuer'] if award['issuer'] else ''}"
                    for award in awards
                ]
            }
            
            return cv_data

def generate_resume(cv_data: Dict[str, Any], output_path: str = "resume.pdf") -> None:
    """
    Generates a PDF resume from the provided CV data.
    The CV data should include AI-generated headline and profile.
    """
    doc = SimpleDocTemplate(output_path, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()
    
    # Create custom styles
    styles.add(ParagraphStyle(
        name='Bullet',
        parent=styles['Normal'],
        leftIndent=20,
        firstLineIndent=0,
        spaceBefore=2,
        spaceAfter=2
    ))
    
    content = []
    
    # Add headline
    content.append(Paragraph(cv_data['headline'], styles['Title']))
    content.append(Spacer(1, 12))
    
    # Add profile
    content.append(Paragraph("Professional Profile", styles['Heading2']))
    content.append(Paragraph(cv_data['profile'], styles['Normal']))
    content.append(Spacer(1, 12))
    
    # Add employment history
    content.append(Paragraph("Professional Experience", styles['Heading2']))
    content.append(Spacer(1, 6))
    
    for job in cv_data['employmentHistory']:
        # Add job title and date
        content.append(Paragraph(job['title'], styles['Heading3']))
        content.append(Paragraph(job['date'], styles['Normal']))
        if job.get('location'):
            content.append(Paragraph(job['location'], styles['Normal']))
        content.append(Spacer(1, 6))
        
        # Add bullet points
        for bullet in job['bulletPoints']:
            bullet_text = "• " + bullet['content']
            content.append(Paragraph(bullet_text, styles['Bullet']))
        content.append(Spacer(1, 12))
    
    # Add education
    if cv_data.get('education'):
        content.append(Paragraph("Education", styles['Heading2']))
        content.append(Paragraph(cv_data['education'], styles['Normal']))
        content.append(Spacer(1, 12))
    
    # Add certificates and awards
    if cv_data.get('certificatesAndAwards'):
        content.append(Paragraph("Certificates & Awards", styles['Heading2']))
        for award in cv_data['certificatesAndAwards']:
            content.append(Paragraph("• " + award, styles['Bullet']))
    
    # Build the PDF
    doc.build(content)

if __name__ == "__main__":
    # Read CV data from stdin
    import sys
    cv_data = json.load(sys.stdin)
    
    # Generate the PDF
    generate_resume(cv_data)
    print("PDF generated successfully!")
